import { useForm } from '@inertiajs/react';
import { Link } from '@inertiajs/react';

export default function Login() {
  const { data, setData, post, errors } = useForm({
    email: '',
    senha: '',
  });
  
   const handleSubmit = async (e) => {
  e.preventDefault();

  try {
    const response = await fetch('/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: data.email, senha: data.senha }),
    });

    const json = await response.json();

    if (response.ok) {
      localStorage.setItem('token', json.token); // supondo que backend retorne { token: '...' }
      // Redirecione para página protegida, por exemplo:
      window.location.href = '/dashboard';
    } else {
      // Aqui você pode setar os erros para mostrar no form
      // Por exemplo, se seu backend retorna { errors: { email: [...], senha: [...] } }
      console.log(json.errors);
      // Se quiser, faça: setErrors(json.errors);
    }
  } catch (error) {
    console.error('Erro no login:', error);
  }
};


  return (
    <div className="flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8">
      <div className="lg:mx-auto lg:w-full lg:max-w-sm">
        <img
          alt="Care.ly"
          src="/assets/Dark_left_logo.png"
          className="mx-auto h-20 rounded-lg w-auto"
        />
        <h2 className="mt-10 text-center text-2xl font-bold tracking-tight text-gray-900">
          Entre na sua conta de voluntário...
        </h2>
      </div>

      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
        <form onSubmit={handleSubmit} className="space-y-6" noValidate>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-900">
              Digite seu email
            </label>
            <div className="mt-2">
              <input
                id="email"
                name="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                required
                className="block w-full rounded-md px-3 py-1.5 text-base"
              />
              {errors.email && (
                <div className="text-red-500 text-sm mt-1">{errors.email}</div>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="senha" className="block text-sm font-medium text-gray-900">
              Senha
            </label>
            <div className="mt-2">
              <input
                id="senha"
                name="senha"
                type="password"
                value={data.senha}
                onChange={(e) => setData('senha', e.target.value)}
                required
                className="block w-full rounded-md px-3 py-1.5 text-base"
              />
              {errors.senha && (
                <div className="text-red-500 text-sm mt-1">{errors.senha}</div>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="w-full bg-indigo-600 text-white py-2 rounded-md"
            >
              Logue-se
            </button>
          </div>
        </form>

        <p className="mt-10 text-center text-sm text-gray-500">
          Não possui conta?{' '}
          <Link href="/register" className="text-indigo-600 hover:underline">
            Cadastre-se
          </Link>
        </p>
      </div>
    </div>
  );
}


iniciativas 

import  { useState, useEffect } from "react";
import { DotLottieReact } from "@lottiefiles/dotlottie-react";
import { Inertia } from '@inertiajs/inertia';
// Card individual
const CardInstituicao = ({ instituicao, onClick }) => (
  <div
    onClick={onClick}
    className="bg-white break-inside-avoid rounded-lg shadow-md overflow-hidden cursor-pointer relative transition-transform hover:scale-[1.015]"
  >
    <div className="relative w-full h-48">
      <img
        src={instituicao.imagem}
        alt={instituicao.nm_instituicao}
        className="w-full h-full object-cover"
      />
      <div className="absolute inset-0 bg-gradient-to-t from-black via-transparent to-transparent opacity-70"></div>
      <h3 className="absolute bottom-2 left-2 right-2 text-white text-xl font-bold truncate">
        {instituicao.nm_instituicao}
      </h3>
    </div>
  </div>
);

// Modal para visualização da iniciativa
const Modal = ({
  initiative,
  onClose,
  onConfirmSuccess,
  isRegisterMode,
  newInitiative,
  setNewInitiative,
  onSubmit,
}) => {
  const [showSuccess, setShowSuccess] = useState(false);

  const handleConfirm = () => {
    setShowSuccess(true);
    setTimeout(() => {
      setShowSuccess(false);
      onConfirmSuccess();
    }, 3000);
  };

// Depois:
const handleEnviarPerfil = () => {
  const isLoggedIn = localStorage.getItem("userLogged");
  if (!isLoggedIn) {
    Inertia.visit("/LoginVoluntario");
  } else {
    handleConfirm();
  }
};

  return (
    <div className="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-zinc-800 w-full max-w-4xl p-6 rounded-xl shadow-lg text-black dark:text-[#d4d4d4] flex flex-col gap-6 relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-700 dark:text-gray-300 text-2xl"
        >
          &times;
        </button>

        {showSuccess ? (
          <div className="flex flex-col items-center justify-center py-12">
            <DotLottieReact
              src="https://lottie.host/1744fdb6-3af1-4284-b661-cd9a1d455738/UVRVaY59jR.lottie"
              autoplay
              loop={false}
              style={{ height: 200 }}
            />
            <p className="mt-4 text-lg font-semibold text-green-600">
              Enviamos a sua solicitação à campanha
            </p>
          </div>
        ) : isRegisterMode ? (
          <>
            <h2 className="text-2xl font-bold">Cadastrar Iniciativa</h2>
            <input
              type="text"
              placeholder="Título"
              value={newInitiative.title}
              onChange={(e) =>
                setNewInitiative({ ...newInitiative, title: e.target.value })
              }
              className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-zinc-700 text-black dark:text-white p-2 rounded w-full"
            />
            <textarea
              placeholder="Descrição"
              value={newInitiative.description}
              onChange={(e) =>
                setNewInitiative({
                  ...newInitiative,
                  description: e.target.value,
                })
              }
              className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-zinc-700 text-black dark:text-white p-2 rounded w-full"
            />
            <input
              type="file"
              accept="image/*"
              onChange={(e) =>
                setNewInitiative({
                  ...newInitiative,
                  image: URL.createObjectURL(e.target.files[0]),
                })
              }
              className="dark:text-white"
            />
            <button
              onClick={onSubmit}
              className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded self-start"
            >
              Salvar Iniciativa
            </button>
          </>
        ) : (
          <div className="flex gap-6">
            <img
              src={initiative.image}
              alt={initiative.title}
              className="w-1/2 h-auto rounded-lg object-cover"
            />
            <div className="flex-1 flex flex-col justify-between">
              <div>
                <h2 className="text-3xl font-bold mb-4">{initiative.title}</h2>
                <p className="text-gray-700 dark:text-gray-300 text-lg mb-6">
                  {initiative.description}
                </p>
              </div>
              <button
                onClick={handleEnviarPerfil}
                className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-full"
              >
                Enviar perfil
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Componente principal
const Iniciativas = () => {
  const [instituicoes, setInstituicoes] = useState([]);
  const [selecionada, setSelecionada] = useState(null);
  const [isRegisterOpen, setIsRegisterOpen] = useState(false);
  const [newInitiative, setNewInitiative] = useState({
    title: "",
    description: "",
    image: null,
  });



useEffect(() => {
  const token = localStorage.getItem('token');
  console.log("Token:", token);

  fetch("http://localhost:8000/api/instituicoes", {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
  })
    .then((res) => res.json())
    .then((dados) => {
      const aprovadas = dados.filter((item) => item.status === "aceito");
      setInstituicoes(aprovadas);
    })
    .catch((erro) => console.error("Erro ao buscar instituições:", erro));
}, []);

  const handleCardClick = (instituicao) => {
    setSelecionada({
      title: instituicao.nm_instituicao,
      description: instituicao.descricao,
      image: instituicao.imagem,
    });
  };

  const handleCloseModal = () => {
    setSelecionada(null);
    setIsRegisterOpen(false);
  };

  const handleRegister = () => {
    console.log("Cadastrar iniciativa:", newInitiative);
    // Aqui você pode fazer um POST para a API se quiser salvar no servidor
    setIsRegisterOpen(false);
    setNewInitiative({ title: "", description: "", image: null });
  };

const urlImagem = "https://i.postimg.cc/65NVgn6n/banner-clear.png";



  return (
    <div className="min-h-screen dark:bg-zinc-900 bg-gray-50 px-4 pb-8">
      <div className="pt-4">
        <img
          src={urlImagem}
          alt="Banner"
          className="w-full h-64 object-cover rounded-2xl shadow-lg"
        />
      </div>

      <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {instituicoes.map((item) => (
          <CardInstituicao
            key={item.id}
            instituicao={item}
            onClick={() => handleCardClick(item)}
          />
        ))}
      </div>

      {/* Modal de visualização */}
      {selecionada && (
        <Modal
          initiative={selecionada}
          onClose={handleCloseModal}
          onConfirmSuccess={handleCloseModal}
        />
      )}

      {/* Modal de cadastro */}
      {isRegisterOpen && (
        <Modal
          isRegisterMode
          onClose={handleCloseModal}
          onSubmit={handleRegister}
          newInitiative={newInitiative}
          setNewInitiative={setNewInitiative}
        />
      )}
    </div>
  );
};

export default Iniciativas;


<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Tymon\JWTAuth\Facades\JWTAuth;

class AuthController extends Controller
{
    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (!$token = JWTAuth::attempt($credentials)) {
            return response()->json(['error' => 'Unauthorized'], 401);
        }

        return response()->json([
            'token' => $token,
            'user' => Auth::user()
        ]);
    }

    public function logout()
    {
        JWTAuth::invalidate(JWTAuth::getToken());
        return response()->json(['message' => 'Successfully logged out']);
    }
}

